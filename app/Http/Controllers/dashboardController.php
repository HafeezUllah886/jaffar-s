<?php
 namespace App\Http\Controllers; use App\Models\accounts; use App\Models\expenses; use App\Models\products; use App\Models\purchase_details; use App\Models\sale_details; use App\Models\sales; use Carbon\Carbon; use Illuminate\Http\Request; use Illuminate\Support\Facades\DB; class dashboardController extends Controller { public function index() { $months = array(); for ($i = 0; $i < 12; $i++) { $date = Carbon::now()->subMonths($i); $firstDay = $date->copy()->firstOfMonth()->toDateString(); $lastDay = $date->copy()->lastOfMonth()->toDateString(); $monthName = $date->format("\x4d"); $months[] = array("\146\151\162\163\x74" => $firstDay, "\x6c\141\163\164" => $lastDay, "\x6e\141\x6d\x65" => $monthName); } $months = array_reverse($months); $sales = array(); $monthNames = array(); $expenses = array(); $products = products::all(); $profits = array(); $last_sale = 0; $last_expense = 0; $last_profit = 0; foreach ($months as $key => $month) { $first = $month["\146\151\162\163\x74"]; $last = $month["\154\141\163\x74"]; $sale = sales::whereBetween("\144\141\164\145", array($first, $last))->count(); $expense = expenses::whereBetween("\x64\x61\x74\145", array($first, $last))->sum("\141\x6d\x6f\x75\x6e\164"); $sales[] = $sale; $expenses[] = $expense; $monthNames[] = $month["\x6e\141\x6d\x65"]; $profit = 0; foreach ($products as $product) { $purchases = purchase_details::where("\160\x72\x6f\x64\x75\x63\x74\x49\104", $product->id)->whereBetween("\144\141\x74\x65", array($first, $last)); $purchases_amount = $purchases->sum("\x61\155\157\165\x6e\x74"); $purchases_qty = $purchases->sum("\161\164\x79"); $purchases_bonus = $purchases->sum("\x62\x6f\156\x75\x73"); $purchase_qty = $purchases_qty + $purchases_bonus; if ($purchase_qty > 0) { $purchase_price = $purchases_amount / $purchase_qty; } else { $purchase_price = 0; } $sales1 = sale_details::where("\160\x72\157\x64\165\143\x74\111\104", $product->id)->whereBetween("\x64\x61\x74\145", array($first, $last)); $sales_amount = $sales1->sum("\x74\x69"); $sales_qty = $sales1->sum("\161\164\171"); if ($sales_qty > 0) { $sale_price = $sales_amount / $sales_qty; } else { $sale_price = 0; } $ppi = $sale_price - $purchase_price; $ppp = $ppi * $sales_qty; $profit += $ppp; } $profits[] = number_format($profit - $expense, 0); $last_sale = $sale; $last_expense = $expense; $last_profit = $profit; } dashboard(); $topProducts = products::withSum("\x73\141\154\145\104\145\x74\141\x69\x6c\163", "\161\164\171")->withSum("\x73\x61\154\145\104\145\x74\x61\151\x6c\163", "\164\x69")->orderByDesc("\x73\141\x6c\145\137\x64\145\x74\141\x69\154\163\x5f\x73\165\155\x5f\161\164\171")->take(5)->get(); $topProductsArray = array(); foreach ($topProducts as $product) { $stock = getStock($product->id); $price = avgSalePrice("\x61\x6c\154", "\141\x6c\x6c", $product->id); $topProductsArray[] = array("\156\141\x6d\x65" => $product->name, "\x70\162\151\143\145" => $price, "\163\x74\x6f\x63\153" => $stock, "\141\155\157\x75\x6e\164" => $product->sale_details_sum_ti, "\163\157\x6c\144" => $product->sale_details_sum_qty); } $topCustomers = accounts::where("\164\x79\160\145", "\x43\x75\x73\164\157\x6d\145\162")->withSum("\163\141\154\x65", "\156\x65\164")->orderByDesc("\x73\x61\x6c\145\x5f\163\x75\x6d\x5f\156\145\x74")->take(5)->get(); $topCustomersArray = array(); foreach ($topCustomers as $customer) { if ($customer->id != 2) { $balance = getAccountBalance($customer->id); $customer_purchases = $customer->sale_sum_net; $topCustomersArray[] = array("\x6e\x61\155\145" => $customer->title, "\x70\x75\162\x63\x68\141\x73\145\x73" => $customer_purchases, "\x62\x61\154\x61\156\x63\x65" => $balance); } } if (auth()->user()->role != "\101\144\155\151\156") { return to_route("\157\x72\x64\x65\162\x73\56\x69\156\144\145\170"); } return view("\x64\141\x73\x68\142\x6f\141\x72\144\x2e\151\x6e\x64\x65\170", compact("\x73\x61\x6c\x65\x73", "\x6d\157\x6e\164\x68\116\141\x6d\145\x73", "\x65\x78\x70\145\x6e\x73\145\163", "\x70\162\157\146\151\164\x73", "\154\141\x73\x74\137\163\141\x6c\145", "\154\141\x73\x74\x5f\x65\170\160\x65\156\163\145", "\x6c\141\163\x74\x5f\160\162\157\x66\151\164", "\164\x6f\160\120\162\x6f\x64\165\143\x74\x73\101\x72\x72\141\x79", "\164\157\160\103\x75\x73\164\157\155\x65\x72\163\101\162\x72\x61\171")); } }