<?php
 namespace App\Http\Controllers; use App\Models\accounts; use App\Models\orders; use App\Models\products; use App\Models\sale_details; use App\Models\sale_payments; use App\Models\sales; use App\Models\salesman; use App\Models\stock; use App\Models\transactions; use App\Models\units; use App\Models\User; use Exception; use Illuminate\Http\Request; use Illuminate\Support\Facades\DB; class SalesController extends Controller { public function index(Request $request) { $start = $request->start ?? now()->toDateString(); $end = $request->end ?? now()->toDateString(); $sales = sales::with("\x70\141\x79\155\145\x6e\x74\x73")->whereBetween("\144\x61\x74\145", array($start, $end))->orderby("\x69\144", "\x64\x65\x73\x63")->get(); return view("\x73\141\154\145\x73\x2e\151\x6e\x64\x65\170", compact("\163\141\x6c\145\163", "\x73\164\x61\162\x74", "\x65\156\x64")); } public function create() { $products = products::orderby("\x6e\x61\155\x65", "\x61\x73\143")->get(); foreach ($products as $product) { $stock = getStock($product->id); $product->stock = $stock; } $units = units::all(); $customers = accounts::customer()->get(); $accounts = accounts::business()->get(); $orderbookers = User::where("\x72\x6f\154\x65", "\117\x72\x64\x65\x72\142\x6f\157\x6b\145\x72")->get(); return view("\163\141\154\145\x73\56\143\162\145\141\x74\145", compact("\x70\162\157\144\x75\143\x74\x73", "\165\156\x69\164\x73", "\143\165\163\x74\157\155\x65\162\x73", "\x61\143\143\157\165\156\x74\163", "\157\162\144\145\x72\x62\x6f\157\x6b\145\162\x73")); } public function store(Request $request) { try { if ($request->isNotFilled("\x69\144")) { throw new Exception("\120\x6c\x65\141\163\145\40\123\x65\154\145\143\x74\40\x41\x74\x6c\145\x61\x73\x74\x20\x4f\x6e\x65\40\120\162\157\144\x75\143\x74"); } DB::beginTransaction(); $ref = getRef(); $sale = sales::create(array("\143\x75\x73\x74\157\155\x65\x72\111\x44" => $request->customerID, "\x64\141\164\145" => $request->date, "\x6e\x6f\164\x65\x73" => $request->notes, "\144\x69\163\143\x6f\x75\156\x74" => $request->discount1, "\146\162\151\x67\x68\164" => $request->fright, "\146\162\151\x67\x68\x74\61" => $request->fright1, "\167\x68" => $request->whTax, "\157\162\144\145\x72\x62\157\157\x6b\145\162\x49\x44" => $request->orderbookerID, "\162\145\146\x49\x44" => $ref)); $ids = $request->id; $total = 0; foreach ($ids as $key => $id) { $unit = units::find($request->unit[$key]); $qty1 = $request->qty[$key] * $unit->value + $request->bonus[$key]; $qty = $request->qty[$key] * $unit->value; $price = $request->price[$key]; $total += $request->ti[$key]; sale_details::create(array("\163\x61\154\x65\163\111\x44" => $sale->id, "\160\162\x6f\x64\165\143\x74\x49\104" => $id, "\x70\162\151\143\x65" => $price, "\161\x74\x79" => $qty, "\x64\x69\x73\143\157\165\x6e\164" => $request->discount[$key], "\164\x69" => $request->ti[$key], "\x74\x70" => $request->tp[$key], "\147\163\x74" => $request->gst[$key], "\x67\163\164\126\141\154\x75\145" => $request->gstValue[$key], "\144\x61\164\145" => $request->date, "\142\x6f\x6e\165\163" => $request->bonus[$key], "\165\x6e\151\164\111\x44" => $unit->id, "\x75\156\151\x74\x56\x61\x6c\165\145" => $unit->value, "\162\x65\x66\x49\x44" => $ref)); createStock($id, 0, $qty1, $request->date, "\123\157\x6c\144\40\x69\156\x20\111\156\166\x20\x23\x20{$sale->id}", $ref); } $whTax = $total * $request->whTax / 100; $net = $total + $whTax + $request->fright1 - ($request->discount1 + $request->fright); $sale->update(array("\x77\x68\x56\141\x6c\165\145" => $whTax, "\x6e\145\x74" => $net)); if ($request->status == "\160\141\151\x64") { sale_payments::create(array("\x73\141\x6c\145\x73\x49\104" => $sale->id, "\141\143\x63\157\165\x6e\x74\111\x44" => $request->accountID, "\144\x61\164\145" => $request->date, "\141\x6d\x6f\165\156\164" => $net, "\156\157\x74\145\163" => "\x46\165\154\154\40\x50\141\151\x64", "\162\x65\x66\x49\104" => $ref)); createTransaction($request->accountID, $request->date, $net, 0, "\x50\x61\x79\x6d\145\156\x74\40\x6f\x66\40\111\x6e\x76\x20\116\x6f\x2e\x20{$sale->id}", $ref); createTransaction($request->customerID, $request->date, $net, $net, "\x50\x61\x79\155\x65\x6e\x74\x20\x6f\146\40\x49\x6e\x76\40\x4e\x6f\x2e\40{$sale->id}", $ref); } else { createTransaction($request->customerID, $request->date, 0, $net, "\x50\x65\x6e\x64\x69\156\x67\40\x41\155\x6f\x75\156\x74\40\157\x66\40\x49\156\166\x20\116\157\56\x20{$sale->id}", $ref); } if ($request->orderID) { $order = orders::find($request->orderID); $order->update(array("\x73\x61\154\x65\x49\104" => $sale->id, "\163\164\x61\164\165\x73" => "\103\157\x6d\160\154\x65\164\x65\144")); } DB::commit(); return to_route("\163\x61\154\145\x2e\x73\150\x6f\x77", $sale->id)->with("\163\165\x63\x63\145\x73\x73", "\x53\141\x6c\145\40\103\162\x65\x61\164\145\144"); } catch (\Exception $e) { DB::rollback(); return back()->with("\x65\x72\x72\157\162", $e->getMessage()); } } public function show(sales $sale) { $balance = spotBalance($sale->customerID, $sale->refID); return view("\x73\x61\x6c\x65\163\56\x76\151\x65\167", compact("\163\x61\154\x65", "\x62\141\154\x61\156\x63\145")); } public function printAll($from, $to) { $start = $from; $end = $to; $sales = sales::with("\x70\141\x79\x6d\145\x6e\164\x73")->whereBetween("\x64\141\164\145", array($start, $end))->orderby("\151\x64", "\x64\145\163\x63")->get(); foreach ($sales as $sale) { $sale->balance = spotBalance($sale->customerID, $sale->refID); } return view("\x73\141\154\145\x73\56\160\x72\x69\156\164\141\x6c\154", compact("\163\x61\x6c\145\x73", "\x73\164\x61\162\x74", "\145\x6e\x64")); } public function gatePass($id) { $sale = sales::find($id); return view("\x73\141\154\x65\x73\x2e\147\141\164\145\160\x61\163\163", compact("\163\x61\x6c\145")); } public function edit(sales $sale) { $products = products::orderby("\x6e\x61\155\x65", "\x61\163\x63")->get(); $units = units::all(); $customers = accounts::customer()->get(); $accounts = accounts::business()->get(); $orderbookers = User::where("\x72\157\154\x65", "\117\162\x64\145\x72\x62\157\x6f\x6b\145\162")->get(); return view("\x73\141\154\x65\x73\56\145\x64\x69\164", compact("\x70\x72\x6f\144\x75\x63\164\x73", "\x75\156\151\164\163", "\143\x75\x73\164\157\155\x65\x72\x73", "\x61\x63\143\157\165\x6e\164\163", "\x73\x61\154\x65", "\x6f\162\144\x65\x72\x62\157\157\x6b\145\x72\163")); } public function update(Request $request, $id) { try { DB::beginTransaction(); $sale = sales::find($id); foreach ($sale->payments as $payment) { transactions::where("\162\145\146\111\x44", $payment->refID)->delete(); $payment->delete(); } foreach ($sale->details as $product) { stock::where("\162\145\146\x49\x44", $product->refID)->delete(); $product->delete(); } transactions::where("\x72\x65\146\x49\x44", $sale->refID)->delete(); $ref = $sale->refID; $sale->update(array("\x63\x75\163\164\x6f\155\145\162\111\x44" => $request->customerID, "\144\141\164\145" => $request->date, "\156\x6f\x74\145\x73" => $request->notes, "\144\x69\163\x63\x6f\165\x6e\x74" => $request->discount1, "\146\162\x69\x67\x68\x74" => $request->fright, "\x66\x72\x69\x67\x68\164\61" => $request->fright1, "\x77\x68" => $request->whTax, "\157\x72\x64\145\162\142\157\x6f\x6b\145\x72\x49\104" => $request->orderbookerID, "\x72\145\x66\x49\104" => $ref)); $ids = $request->id; $total = 0; foreach ($ids as $key => $id) { $unit = units::find($request->unit[$key]); $qty1 = $request->qty[$key] * $unit->value + $request->bonus[$key]; $qty = $request->qty[$key] * $unit->value; $price = $request->price[$key]; $total += $request->ti[$key]; sale_details::create(array("\x73\x61\154\x65\163\x49\x44" => $sale->id, "\160\162\157\x64\165\x63\164\111\x44" => $id, "\160\x72\151\x63\x65" => $price, "\x71\164\171" => $qty, "\x64\151\163\143\x6f\x75\x6e\164" => $request->discount[$key], "\164\x69" => $request->ti[$key], "\164\160" => $request->tp[$key], "\x67\163\164" => $request->gst[$key], "\x67\x73\164\x56\141\x6c\165\x65" => $request->gstValue[$key], "\x64\141\x74\x65" => $request->date, "\x62\x6f\x6e\x75\x73" => $request->bonus[$key], "\165\x6e\151\x74\x49\x44" => $unit->id, "\x75\156\151\x74\x56\141\x6c\165\145" => $unit->value, "\162\x65\x66\x49\x44" => $ref)); createStock($id, 0, $qty1, $request->date, "\x53\157\x6c\x64\40\x69\156\x20\111\156\x76\40\43\40{$sale->id}", $ref); } $whTax = $total * $request->whTax / 100; $net = $total + $whTax + $request->fright1 - ($request->discount1 + $request->fright); dashboard(); $sale->update(array("\x77\150\126\x61\154\165\145" => $whTax, "\156\x65\164" => $net)); if ($request->status == "\160\x61\x69\144") { sale_payments::create(array("\163\x61\154\145\163\111\x44" => $sale->id, "\141\x63\143\x6f\x75\x6e\x74\x49\104" => $request->accountID, "\x64\x61\164\x65" => $request->date, "\x61\x6d\157\165\156\x74" => $net, "\x6e\157\164\x65\163" => "\x46\x75\154\154\40\x50\141\x69\144", "\162\x65\x66\111\104" => $sale->refID)); createTransaction($request->accountID, $request->date, $net, 0, "\x50\x61\x79\x6d\x65\x6e\164\x20\x6f\146\x20\x49\156\x76\x20\116\x6f\56\40{$sale->id}", $sale->refID); createTransaction($request->customerID, $request->date, $net, $net, "\x50\141\x79\155\x65\x6e\x74\x20\157\x66\40\111\x6e\x76\40\116\157\x2e\40{$sale->id}", $ref); } else { createTransaction($request->customerID, $request->date, 0, $net, "\120\x65\x6e\144\151\156\147\x20\x41\155\x6f\165\x6e\x74\x20\x6f\146\x20\x49\x6e\x76\40\x4e\x6f\x2e\40{$sale->id}", $sale->refID); } DB::commit(); return to_route("\163\x61\x6c\145\56\151\156\144\x65\170")->with("\x73\x75\143\x63\145\163\x73", "\123\x61\x6c\145\x20\x55\160\144\141\164\145\x64"); } catch (\Exception $e) { DB::rollBack(); return to_route("\163\x61\154\145\x2e\151\156\x64\145\170")->with("\x65\162\x72\157\x72", $e->getMessage()); } } public function destroy($id) { try { DB::beginTransaction(); $sale = sales::find($id); foreach ($sale->payments as $payment) { transactions::where("\x72\x65\146\111\104", $payment->refID)->delete(); $payment->delete(); } foreach ($sale->details as $product) { stock::where("\162\x65\x66\111\x44", $product->refID)->delete(); $product->delete(); } transactions::where("\162\x65\146\x49\x44", $sale->refID)->delete(); $sale->delete(); DB::commit(); session()->forget("\143\157\x6e\x66\151\162\x6d\x65\x64\x5f\160\x61\163\x73\x77\157\x72\x64"); return to_route("\163\141\154\145\56\151\156\144\145\x78")->with("\163\x75\143\143\x65\163\163", "\x53\x61\154\x65\x20\104\145\x6c\145\x74\145\144"); } catch (\Exception $e) { DB::rollBack(); session()->forget("\143\x6f\156\x66\x69\162\155\145\144\x5f\160\141\163\163\x77\x6f\x72\144"); return to_route("\163\x61\154\x65\56\x69\156\x64\x65\x78")->with("\x65\x72\x72\157\162", $e->getMessage()); } } public function getSignleProduct($id) { $product = products::with("\165\156\151\x74")->find($id); $stocks = stock::select(DB::raw("\x53\125\x4d\50\143\x72\51\x20\x2d\40\x53\125\x4d\x28\x64\x62\x29\40\101\123\40\142\x61\154\141\x6e\x63\x65"))->where("\160\162\157\x64\165\143\x74\x49\x44", $product->id)->get(); $product->stock = getStock($id); return $product; } public function getProductByCode($code) { $product = products::where("\x63\x6f\144\x65", $code)->first(); if ($product) { return $product->id; } return "\x4e\157\x74\x20\x46\x6f\x75\156\x64"; } }