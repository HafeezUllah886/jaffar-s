<?php
 namespace App\Http\Controllers; use App\Models\accounts; use App\Models\order_details; use App\Models\orders; use App\Models\products; use App\Models\units; use App\Models\User; use Exception; use Illuminate\Http\Request; use Illuminate\Support\Facades\DB; class OrdersController extends Controller { public function index(Request $request) { $start = $request->start ?? now()->toDateString(); $end = $request->end ?? now()->toDateString(); dashboard(); if (Auth()->user()->role == "\x41\x64\x6d\x69\x6e") { $orders = orders::whereBetween("\144\141\x74\x65", array($start, $end))->orderBy("\151\144", "\144\145\163\143")->get(); } else { $orders = orders::where("\x6f\x72\144\145\162\142\x6f\x6f\x6b\145\162\x49\x44", auth()->user()->id)->whereBetween("\x64\141\x74\145", array($start, $end))->orderBy("\x69\x64", "\x64\145\x73\143")->get(); } return view("\x6f\162\144\145\162\x73\x2e\x69\156\144\x65\x78", compact("\x6f\162\144\145\162\163", "\x73\164\x61\x72\164", "\x65\156\x64")); } public function create() { $products = products::all(); $customers = accounts::Customer()->get(); $units = units::all(); return view("\157\162\144\x65\162\163\56\x63\162\x65\x61\164\x65", compact("\160\162\x6f\x64\165\143\x74\x73", "\x63\165\x73\164\157\155\145\x72\x73", "\x75\x6e\151\164\163")); } public function store(Request $request) { try { if ($request->isNotFilled("\x69\x64")) { throw new Exception("\x50\154\x65\141\163\x65\40\123\x65\154\x65\143\x74\40\101\x74\x6c\145\x61\x73\x74\40\117\x6e\x65\x20\120\x72\x6f\x64\165\x63\164"); } DB::beginTransaction(); $ref = getRef(); $order = orders::create(array("\157\x72\x64\x65\x72\142\157\x6f\x6b\x65\x72\x49\x44" => auth()->user()->id, "\x63\x75\x73\164\157\x6d\145\162\111\x44" => $request->customerID, "\144\141\x74\145" => $request->date, "\x6e\x6f\164\145\x73" => $request->notes)); $ids = $request->id; $total = 0; foreach ($ids as $key => $id) { $unit = units::find($request->unit[$key]); $product = products::find($id); $qty = $request->qty[$key] * $unit->value; $price = $product->price - $product->discount; $amount = $qty * $price; $total += $amount; order_details::create(array("\157\162\x64\145\x72\111\104" => $order->id, "\160\x72\157\144\x75\143\x74\111\x44" => $id, "\x70\162\x69\x63\145" => $product->price, "\x71\x74\171" => $qty, "\144\x69\x73\x63\x6f\165\156\x74" => $product->discount, "\141\155\157\x75\x6e\164" => $amount, "\144\141\x74\145" => $request->date, "\165\x6e\151\x74\111\104" => $unit->id, "\x75\x6e\x69\x74\126\141\154\x75\145" => $unit->value)); } $order->update(array("\x6e\145\x74" => $total)); DB::commit(); return to_route("\x6f\162\x64\145\x72\163\x2e\x73\x68\x6f\x77", $order->id)->with("\x73\x75\143\143\145\163\163", "\117\162\144\145\x72\x20\103\162\x65\141\x74\145\x64"); } catch (\Exception $e) { DB::rollback(); return back()->with("\145\x72\x72\157\162", $e->getMessage()); } } public function show(orders $order) { return view("\157\162\x64\145\x72\163\x2e\x76\151\145\x77", compact("\157\x72\x64\145\162")); } public function edit(orders $order) { $products = products::all(); $customers = accounts::Customer()->get(); $units = units::all(); return view("\157\162\144\x65\162\163\x2e\145\144\151\164", compact("\x70\x72\x6f\144\165\x63\x74\163", "\143\165\163\164\x6f\x6d\145\x72\x73", "\x75\x6e\x69\164\x73", "\157\x72\144\145\x72")); } public function update(Request $request, orders $order) { try { if ($request->isNotFilled("\151\x64")) { throw new Exception("\120\154\145\141\x73\x65\40\x53\x65\x6c\x65\143\x74\x20\101\164\154\145\141\163\x74\40\117\x6e\145\40\120\162\157\x64\165\143\x74"); } DB::beginTransaction(); foreach ($order->details as $product) { $product->delete(); } $order = orders::create(array("\x6f\x72\x64\x65\162\142\157\x6f\153\x65\162\111\104" => auth()->user()->id, "\x63\165\x73\x74\x6f\155\145\162\111\x44" => $request->customerID, "\144\141\x74\x65" => $request->date, "\x6e\157\x74\x65\163" => $request->notes)); $ids = $request->id; $total = 0; foreach ($ids as $key => $id) { $unit = units::find($request->unit[$key]); $product = products::find($id); $qty = $request->qty[$key] * $unit->value; $price = $product->price - $product->discount; $amount = $qty * $price; $total += $amount; order_details::create(array("\x6f\162\144\x65\x72\111\x44" => $order->id, "\160\162\x6f\144\165\143\x74\111\x44" => $id, "\160\x72\x69\143\145" => $product->price, "\161\x74\171" => $qty, "\x64\151\163\143\157\x75\156\x74" => $product->discount, "\141\x6d\x6f\x75\x6e\164" => $amount, "\144\141\x74\x65" => $request->date, "\x75\x6e\x69\x74\x49\104" => $unit->id, "\x75\x6e\151\x74\x56\x61\x6c\165\x65" => $unit->value)); } $order->update(array("\156\x65\x74" => $total)); DB::commit(); return to_route("\x6f\x72\144\x65\162\163\x2e\x73\x68\x6f\x77", $order->id)->with("\163\x75\143\143\145\163\163", "\x4f\162\x64\145\162\x20\103\162\145\141\164\145\144"); } catch (\Exception $e) { DB::rollback(); return back()->with("\x65\x72\x72\157\162", $e->getMessage()); } } public function destroy($id) { try { DB::beginTransaction(); $order = orders::find($id); foreach ($order->details as $product) { $product->delete(); } $order->delete(); DB::commit(); session()->forget("\x63\x6f\x6e\x66\151\x72\155\x65\x64\x5f\160\x61\163\163\x77\x6f\162\144"); return to_route("\x6f\x72\144\145\x72\163\x2e\151\x6e\x64\145\x78")->with("\163\165\x63\x63\x65\163\163", "\117\162\x64\x65\x72\40\x44\x65\154\145\164\x65\x64"); } catch (\Exception $e) { DB::rollBack(); session()->forget("\143\x6f\x6e\x66\x69\x72\155\x65\144\x5f\x70\x61\x73\163\167\x6f\x72\x64"); return to_route("\x6f\x72\144\145\162\x73\x2e\151\156\144\x65\x78")->with("\145\162\x72\157\162", $e->getMessage()); } } public function sale($id) { $products = products::orderby("\156\x61\155\145", "\x61\163\143")->get(); foreach ($products as $product) { $stock = getStock($product->id); $product->stock = $stock; } $units = units::all(); $customers = accounts::customer()->get(); $accounts = accounts::business()->get(); $orderbookers = User::where("\162\x6f\x6c\145", "\x4f\x72\x64\x65\x72\x62\157\157\x6b\x65\162")->get(); $order = orders::find($id); return view("\x6f\x72\144\145\162\x73\x2e\163\x61\154\145", compact("\x70\162\157\144\165\143\x74\x73", "\x75\x6e\151\x74\x73", "\x63\x75\163\164\x6f\x6d\145\162\x73", "\x61\143\x63\x6f\165\x6e\164\163", "\157\x72\144\x65\162\x62\157\157\153\x65\x72\x73", "\157\x72\144\x65\x72")); } }